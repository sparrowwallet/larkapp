plugins {
    id 'application'
    id 'org.beryx.jlink' version '3.1.1'
    id 'org.gradlex.extra-java-module-info' version '1.9'
}

org.gradle.internal.os.OperatingSystem os = org.gradle.internal.os.OperatingSystem.current()
String releaseArch = System.getProperty('os.arch') == 'aarch64' ? 'aarch64' : 'x86_64'

group = 'com.sparrowwallet'
version = '1.0.0'

repositories {
    mavenCentral()
    maven { url 'https://code.sparrowwallet.com/api/packages/sparrowwallet/maven' }
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

application {
    mainModule = 'com.sparrowwallet.larkapp'
    mainClass = 'com.sparrowwallet.larkapp.LarkCli'
}

dependencies {
    implementation(project(':drongo'))
    implementation(project(':lark'))
    implementation('org.jcommander:jcommander:2.0')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.17.2')
    implementation('org.slf4j:slf4j-api:2.0.12')
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

jlink {
    mergedModule {
        requires 'java.xml'
        requires 'java.logging'
        uses 'org.eclipse.jetty.http.HttpFieldPreEncoder'
    }

    options = ['--strip-native-commands', '--strip-java-debug-attributes', '--compress', 'zip-6', '--no-header-files', '--no-man-pages', '--ignore-signing-information', '--exclude-files', '**.png']
    launcher {
        name = 'lark'
    }
    jpackage {
        imageName = os.isMacOsX() ? 'Lark' : 'lark'
        appVersion = "${version}"
        skipInstaller = true
        if(os.isWindows()) {
            imageOptions = ['--win-console', '--resource-dir', 'src/main/deploy/package/linux/']
        } else if(os.isMacOsX()) {
            imageOptions = ['--icon', 'src/main/deploy/package/macos/lark.icns', '--resource-dir', 'src/main/deploy/package/macos/']
        } else if(os.isLinux()) {
            imageOptions = ['--resource-dir', 'src/main/deploy/package/linux/']
        }
    }
    if(os.isLinux()) {
        jpackageImage {
            dependsOn('prepareModulesDir', 'copyUdevRules')
        }
    }
}

if(os.isLinux()) {
    tasks.jlink.finalizedBy('addUserWritePermission', 'copyUdevRules')
} else {
    tasks.jlink.finalizedBy('addUserWritePermission')
}

tasks.register('addUserWritePermission', Exec) {
    if(os.isWindows()) {
        commandLine 'icacls', layout.buildDirectory.dir('image/legal').get().toString(), '/grant', 'Users:(OI)(CI)F', '/T'
    } else {
        commandLine 'chmod', '-R', 'u+w', layout.buildDirectory.dir('image/legal').get().toString()
    }
}

tasks.register('copyUdevRules', Copy) {
    from('lark/src/main/resources/udev')
    into(layout.buildDirectory.dir('image/conf/udev'))
    include('*')
}

tasks.register('removeGroupWritePermission', Exec) {
    commandLine 'chmod', '-R', 'g-w', layout.buildDirectory.dir('jpackage/lark').get().toString()
}

tasks.register('packageZipDistribution', Zip) {
    group = 'Other'
    description = 'Packages a zip of the application image'
    archiveFileName = "lark-${version}-${releaseArch}.zip"
    destinationDirectory = layout.buildDirectory.dir('jpackage')
    preserveFileTimestamps = os.isMacOsX()
    from(layout.buildDirectory.dir('jpackage')) {
        include 'lark/**'
        include 'Lark.app/**'
    }
}

tasks.register('packageTarDistribution', Tar) {
    group = 'Other'
    description = 'Packages a tar.gz of the application image'
    dependsOn removeGroupWritePermission
    archiveFileName = "lark-${version}-${releaseArch}.tar.gz"
    destinationDirectory = layout.buildDirectory.dir('jpackage')
    compression = Compression.GZIP
    from(layout.buildDirectory.dir('jpackage')) {
        include 'lark/**'
    }
}

extraJavaModuleInfo {
    module('co.nstant.in:cbor', 'co.nstant.in.cbor') {
        exports('co.nstant.in.cbor')
        exports('co.nstant.in.cbor.model')
        exports('co.nstant.in.cbor.builder')
    }
    module('org.jcommander:jcommander', 'org.jcommander') {
        exports('com.beust.jcommander')
    }
    module('com.sparrowwallet:hid4java', 'org.hid4java') {
        requires('com.sun.jna')
        exports('org.hid4java')
        exports('org.hid4java.jna')
    }
    module('com.sparrowwallet:usb4java', 'org.usb4java') {
        exports('org.usb4java')
    }
    module('com.google.code.findbugs:jsr305', 'com.google.code.findbugs.jsr305')
}